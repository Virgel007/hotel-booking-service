package com.example.hotel_booking_service;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class HotelBookingServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(HotelBookingServiceApplication.class, args);
	}
	/**
	 * Задание 5. Работа с пользователями
	 * ● Опишите сущность «Пользователь». У каждого пользователя есть уникальное имя,
	 * пароль, электронная почта и роль (пользователь или администратор).
	 * ● Создайте в базе данных таблицу для хранения информации о пользователях.
	 * ● Настройте отображение данных из таблицы на поля в сущности в Java.
	 * ● Создайте интерфейс для работы с сущностью «Пользователь», используя Spring
	 * Data JPA. Интерфейс должен предоставлять возможность:
	 * ○ выполнять CRUD-операции;
	 * ○ искать пользователя по его имени;
	 * ○ проверять, существует ли пользователь с указанными именем и адресом
	 * электронной почты.
	 * ● Создайте сервис для работы с пользователями. Сервис должен предоставлять
	 * возможность:
	 * ○ выполнять CRUD-операции;
	 * ○ создавать нового пользователя;
	 * ○ искать пользователя по имени.
	 * ● Опишите объекты передачи данных DTO (Data Transfer Object), которые будут
	 * применяться в контроллерах при запросе пользователя и ответах ему.
	 * ○ Опишите DTO HTTP-запроса, который будет использоваться в слое
	 * контроллеров при запросе на создание или редактирование сущности
	 * «Пользователь».
	 * ○ Опишите DTO HTTP-ответа, который будет использоваться в слое
	 * контроллеров для возвращения сущности «Пользователь».
	 * ● С помощью библиотеки Mapstruct создайте сервисы для маппинга сущностей в DTO
	 * и DTO в сущности:
	 * ○ из DTO на создание или редактирование в сущность «Пользователь»;
	 * ○ из сущности «Пользователь» в DTO на редактирование сущности;
	 * ○ из сущности «Пользователь» в DTO, которое описывает сущность
	 * «Пользователь».
	 * ● Создайте контроллер выполнения для CRUD-операций над пользователями
	 * посредством REST API. Контроллер должен содержать метод создания нового
	 * пользователя с указанной ролью (роль принимается как один из параметров при
	 * создании пользователя). Перед созданием нового пользователя требуется проверка
	 * по логину и почте на отсутствие уже зарегистрированного аккаунта с такими же
	 * данными.
	 */
}
